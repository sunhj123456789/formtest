import { element, by } from 'protractor';
import { Observable } from 'rxjs/internal/Observable';
import { UserService } from './../service/user.service';
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { UserComponent } from './user.component';
import {of} from 'rxjs';
import{By} from  '@angular/platform-browser';



describe('UserComponent', () => {
  let component: UserComponent;
  let fixture: ComponentFixture<UserComponent>;
  let dataservice;
  let mockItems;
  let el: HTMLElement;
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ UserComponent ],
      providers:[UserService]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(UserComponent);
    component = fixture.componentInstance;       
    dataservice=fixture.debugElement.injector.get(UserService);
    mockItems=[
      {name:'sundar',gender:'male',department:'Accounting'},
      {name:'Ram',gender:'male',department:'Science'},
      {name:'jai',gender:'male',department:'HR'}
    ];  
      });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it("should fetch the data asynchronously", async(() => {
  spyOn(dataservice,'get').and.returnValue(of(mockItems));    
  fixture.whenStable().then(()=>{
  fixture.detectChanges();      
  component.getUsers();  
  expect(component.data).toEqual(mockItems);
    })
  }));
  

  it("should check the the no of items display on the page correctly ", async(() => {
    spyOn(dataservice,'get').and.returnValue(of(mockItems));    
    fixture.whenStable().then(()=>{
    fixture.detectChanges();   
    component.getUsers();   
    let result=component.data.length; 
    expect(result).toEqual(3);
      })
    }));
    
  it('should check the panel header of the data',async(()=>{
    fixture.detectChanges();
    const compiled=fixture.debugElement;
    //let element=compiled.query(By.css('h4')).nativeElement.innerText;
    //let element=compiled.query(By.css('.data')).nativeElement.innerText;
    fixture.whenStable().then(()=>{
    let element=compiled.queryAll(By.css('div>.data'));
    //let element=fixture.debugElement.queryAll(By.css('h4'));
    //let data=element[1].nativeElement.query()
    let ph1=element[0].nativeElement.querySelector('h4').innerText;
    let ph2=element[1].nativeElement.querySelector('h4').innerText;
    let ph3=element[2].nativeElement.querySelector('h4').innerText;
    console.log(ph1,ph2,ph3);
    expect(ph1).toContain('sundar');
    expect(ph2).toContain('Ram');
    expect(ph3).toContain('jai');
  //console.log(element[0].nativeElement.querySelector('h4').innerText);
    //console.log(element[0].nativeElement.queryAll(By.css('.list-group-item')));
    //console.log(element[0].nativeElement.queryAll('.list-group-item').innerText);
        });
     
    //expect(element).toContain("sundar"); 
    //expect(element).toContain("male"); 
    //expect(element).toContain("Accounting");  
  }));
  });
    
*****************************http**********************************************

  
  import { Data } from './../model/test.model';
import { TestBed,inject, async } from '@angular/core/testing';
import { DataService } from './data.service';
import {HttpClientTestingModule,HttpTestingController} from '@angular/common/http/testing';
//import { HttpEvent, HttpEventType, HttpClientModule } from '@angular/common/http';
import{HttpClientModule} from '@angular/common/http'

//import { inject } from '@angular/core/testing/src/test_bed';

describe('DataService', () => {
  let service:DataService;
  let backend:HttpTestingController;
  let mockItems:any;
  beforeEach(() => TestBed.configureTestingModule({
      imports:[HttpClientModule,HttpClientTestingModule],
      providers:[DataService],          
     
  }));
     //service= TestBed.get(DataService);
     //httpMock=TestBed.get(HttpTestingController);

    /* afterEach(() => {
      httpMock.verify();
    });*/
  
     it('should be created',async(inject([DataService],(service:DataService) => {      
       expect(service).toBeTruthy();
     })));
     

     it('should check the data is working properly',async(inject([DataService],(service:DataService)=>{
      mockItems={
        "userId": 1,
        "id": 1,
        "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
        "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
      };        
      service.getPosts().subscribe(data=>{
        //console.log(data.id);
        console.log(data);
        
        //expect(data).toEqual(mockItems);
        expect(data[0].id).toEqual(mockItems.id);
        expect(data[0].title).toEqual(mockItems.title);
        expect(data[0].body).toEqual(mockItems.body);
      
        //expect(data.length).toEqual(1);
       });
     })));


     it('should check the url data',async(inject([DataService,HttpTestingController],
      (service:DataService,backend:HttpTestingController)=>{
        /*service.getPosts().subscribe(data=>{
          expect(data).toBeGreaterThan(80);
         });*/
         service.getPosts().subscribe(data=>{
          let req = backend.expectOne(service.Root_URL);
          expect(req.request.method).toEqual('GET');
          req.flush({});
         });
        backend.verify(); 
        

      })));






     /*it('it should retrive the data from API Get',async(()=>{
      service= TestBed.get(DataService);      
       const dummyPosts=[ 
        {
          "userId": 1,
          "id": 1,
          "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
          "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
        }
      ];
       service.getPosts().subscribe(data=>{
        expect(data).toEqual(dummyPosts);
       });
       const req=httpMock.expectOne(service.Root_URL);
       expect(req.request.method).toEqual('GET');
       req.flush(dummyPosts);
       httpMock.verify();
     }));*/
  

});




 
 




 
 







